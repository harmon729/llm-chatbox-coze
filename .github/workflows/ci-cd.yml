name: 🚀 LLM Chat Box CI/CD

on:
  push:
    branches: [main, develop, dev]
  pull_request:
    branches: [main, develop, dev]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: "22.x"
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # 🔍 代码质量检查
  code-quality:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📥 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🔎 Lint code
        run: npm run lint

      - name: 🔍 Type check
        run: npm run type-check

      - name: 🧪 Run tests
        run: npm test
        env:
          CI: true

      # 暂时禁用覆盖率上传，因为我们关闭了覆盖率收集
      # - name: 📊 Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   if: success()
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ./coverage/lcov.info
      #     fail_ci_if_error: false

  # 🏗️ 构建项目
  build:
    name: 🏗️ Build Project
    runs-on: ubuntu-latest
    needs: code-quality
    if: success()

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
            package.json
          retention-days: 1

  # 🚀 预览部署 (仅PR)
  preview-deploy:
    name: 🚀 Preview Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # 🌟 生产部署 (仅main分支)
  production-deploy:
    name: 🌟 Production Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: 🌟 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: --prod
          github-comment: false

  # 📦 语义化发布
  semantic-release:
    name: 📦 Semantic Release
    runs-on: ubuntu-latest
    needs: production-deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    outputs:
      new-release-published: ${{ steps.semantic.outputs.new_release_published }}
      new-release-version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js (for semantic-release)
        uses: actions/setup-node@v4
        with:
          node-version: "22.11.0"
          cache: npm
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          always-auth: false

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Verify Node.js version
        run: |
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "PATH: $PATH"
          which node
          echo "Node location: $(which node)"

      - name: 🏷️ Semantic Release
        id: semantic
        run: |
          # 确保使用正确的 Node.js 版本
          echo "Starting semantic-release with Node.js version: $(node --version)"
          if [[ "$(node --version)" < "v20.8.1" ]]; then
            echo "Error: Node.js version is too old: $(node --version)"
            exit 1
          fi
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 📋 创建发布包
  create-release-assets:
    name: 📋 Create Release Assets
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true'

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build for release
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📦 Create release bundle
        run: |
          mkdir -p release-bundle
          cp -r .next release-bundle/
          cp -r public release-bundle/
          cp -r dist release-bundle/ || echo "No dist directory found"
          cp package.json release-bundle/
          cp package-lock.json release-bundle/
          cp README.md release-bundle/
          cp LICENSE release-bundle/ || echo "No LICENSE file found"

          # 创建压缩包
          cd release-bundle
          zip -r ../llm-chatbox-v${{ needs.semantic-release.outputs.new-release-version }}.zip *
          cd ..

          # 创建 tar.gz
          tar -czf llm-chatbox-v${{ needs.semantic-release.outputs.new-release-version }}.tar.gz -C release-bundle .

      - name: 📤 Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.semantic-release.outputs.new-release-version }}
          files: |
            llm-chatbox-v${{ needs.semantic-release.outputs.new-release-version }}.zip
            llm-chatbox-v${{ needs.semantic-release.outputs.new-release-version }}.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
